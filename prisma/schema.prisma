datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  email         String         @unique
  phone         String         @default("")
  password      String
  product       product[]
  review        review[]
  code          String
  isVerified    Boolean        @default(true)
  bio           String         @default("")
  profile_pic   String         @default("")
  cover_pic     String         @default("")
  location      String         @default("")
  usellaReviews usellaReviews?
  followers     follow[]       @relation("followers")
  following     follow[]       @relation("following")
  order         order[]
  history       history[]
  cart          cart[]
  favourite     favourite[]
}

model follow {
  id          String @id @default(uuid()) @db.Uuid
  followerId  String @db.Uuid
  followingId String @db.Uuid
  follower    user   @relation("followers", fields: [followerId], references: [id])
  following   user   @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model product {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  quantity     Int
  category     Category @default(OTHERS)
  price        Int
  location     String
  description  String
  images       String[]
  seller_id    String   @db.Uuid
  seller_email String
  seller_phone String   @default("")
  seller_name  String
  rating       Int      @default(0)
  status       Status   @default(AVAILABLE)
  seller       user     @relation(fields: [seller_id], references: [id])
  order        order[]
}

model cart {
  id       String @id @default(uuid()) @db.Uuid
  buyer_id String @db.Uuid
  buyer    user   @relation(fields: [buyer_id], references: [id])
}

model favourite {
  id       String @id @default(uuid()) @db.Uuid
  buyer_id String @db.Uuid
  buyer    user   @relation(fields: [buyer_id], references: [id])
}

model order {
  id            String        @id @default(uuid()) @db.Uuid
  buyer_id      String        @db.Uuid
  buyer         user          @relation(fields: [buyer_id], references: [id])
  order_status  OrderStatus   @default(PENDING)
  product_id    String        @db.Uuid
  seller_id     String
  quantity      Int
  price         Int
  paymentStatus PaymentStatus @default(UNPAID)
  location      String
  product       product       @relation(fields: [product_id], references: [id])
}

model payment {
  id              String   @id @default(uuid()) @db.Uuid
  phone           BigInt
  amount          Int
  transactionDate BigInt
  dateCreated     DateTime @default(now())
}

model review {
  id           String @id @default(uuid()) @db.Uuid
  sender_name  String
  sender_image String
  user_id      String @db.Uuid
  rating       Int
  comment      String
  sender_email String
  user         user   @relation(fields: [user_id], references: [id])
}

model usellaReviews {
  id      String @id @default(uuid()) @db.Uuid
  rating  Int
  comment String
  user    user   @relation(fields: [id], references: [id])
}

model history {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  quantity     Int
  category     Category @default(OTHERS)
  price        Int
  location     String
  description  String
  images       String[]
  belongsTo    String   @db.Uuid
  seller_id    String
  seller_email String
  seller_phone String   @default("")
  seller_name  String
  rating       Int      @default(0)
  sold         Boolean  @default(false)
  status       Status   @default(AVAILABLE)
  owner        user     @relation(fields: [belongsTo], references: [id])
}

enum Category {
  ELECTRONICS
  FASHION
  HOME
  BEAUTY
  SPORTS
  BOOKS
  OTHERS
  HEALTH
}

enum PaymentStatus {
  UNPAID
  PAID
}

enum Status {
  AVAILABLE
  PENDING
  SOLD
}

enum OrderStatus {
  PENDING
  ACCEPTED
  DELIVERED
}
